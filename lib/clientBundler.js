"use strict";

const path = require("path");
const webpack = require("webpack");
const VirtualModulesPlugin = require("webpack-virtual-modules");
const hydrationCache = require("./hydrationCache");
const { PACKAGE_ROOT, APP_ROOT } = require("./constants");
const { resolveFromDir } = require("./moduleUtils");

const ENTRY_FILEPATH = path.resolve(
  PACKAGE_ROOT,
  "assets/hydrated-components.js"
);
const COMPONENTS_MAP_FILEPATH = path.resolve(
  PACKAGE_ROOT,
  "assets/autogenerated-components-map.js"
);

function generateComponentsFile(components) {
  return components
    .map(
      ({ componentName, modulePath }) =>
        `export { default as ${componentName} } from "${modulePath}"`
    )
    .join("\n");
}

function promisifiedWebpack(config) {
  return new Promise((resolve, reject) => {
    webpack(config, (err, stats) => {
      if (err || stats.hasErrors()) {
        reject(err);
      }

      console.info(stats.toString());
      resolve(stats);
    });
  });
}

async function bundleClientAssets({ babelConfig, outputPath } = {}) {
  const webpackConfig = {
    target: "web",
    mode: process.env.NODE_ENV === "development" ? "development" : "production",
    entry: ENTRY_FILEPATH,
    output: {
      filename: "main.[contenthash].js",
      path: outputPath,
    },
    plugins: [
      new VirtualModulesPlugin({
        [COMPONENTS_MAP_FILEPATH]: generateComponentsFile(
          hydrationCache.getComponents()
        ),
      }),
    ],
    resolve: {
      extensions: [".js", ".jsx"],
      alias: {
        react: resolveFromDir("react", APP_ROOT),
        "react-dom": resolveFromDir("react-dom", APP_ROOT),
      },
    },
    module: {
      rules: [
        {
          test: /\.jsx?$/,
          exclude: /node_modules\/!(eleventy-plugin-react)/,
          use: [
            {
              loader: "babel-loader",
              options: {
                root: APP_ROOT,
                babelrc: false,
                ...babelConfig,
              },
            },
          ],
        },
      ],
    },
    optimization: {
      runtimeChunk: "single",
      splitChunks: {
        cacheGroups: {
          vendor: {
            test: /node_modules/,
            name: "vendor",
            chunks: "all",
            enforce: true,
          },
        },
      },
    },
  };

  try {
    const stats = await promisifiedWebpack(webpackConfig);
    return stats;
  } catch (e) {
    console.error("Bundling of hydrated components failed.");
    throw e;
  } finally {
    hydrationCache.flush();
  }
}

module.exports = {
  bundleClientAssets,
};
